#!/usr/bin/env python3
"""
Test client for the vulnerability scanner service
"""
import requests
import json
import argparse

def scan_package_json(url, package_content):
    """
    Scan a package.json file for vulnerabilities
    """
    response = requests.post(
        f"{url}/scan",
        json={
            "package_file": "package.json",
            "content": package_content
        },
        headers={"Content-Type": "application/json"}
    )
    return response.json()

def scan_requirements_txt(url, requirements_content):
    """
    Scan a requirements.txt file for vulnerabilities
    """
    response = requests.post(
        f"{url}/scan",
        json={
            "package_file": "requirements.txt",
            "content": requirements_content
        },
        headers={"Content-Type": "application/json"}
    )
    return response.json()

def print_vulnerability_report(scan_results):
    """
    Print a formatted vulnerability report
    """
    print("\n=== Vulnerability Scan Report ===")
    
    if "error" in scan_results:
        print(f"Error: {scan_results['error']}")
        return
    
    summary = scan_results.get("summary", {})
    results = scan_results.get("scan_results", {})
    
    print(f"Risk Level: {summary.get('risk_level', 'unknown').upper()}")
    print(f"Vulnerabilities Found: {summary.get('vulnerabilities_found', 0)}")
    
    # Print vulnerability details
    if "vulnerabilities" in results:
        vulns = results["vulnerabilities"]
        
        # Handle npm audit format (dict of severity levels)
        if isinstance(vulns, dict):
            for severity, items in vulns.items():
                if items:
                    print(f"\n{severity.upper()} Severity Vulnerabilities:")
                    for item in items:
                        print(f"  • {item.get('name')} ({item.get('version')}): {item.get('title')}")
                        print(f"    - {item.get('description')}")
                        print(f"    - Recommendation: {item.get('recommendation')}")
        
        # Handle safety check format (list of vulnerabilities)
        elif isinstance(vulns, list):
            print("\nVulnerabilities:")
            for item in vulns:
                print(f"  • {item.get('package')} ({item.get('version')}): {item.get('title')}")
                print(f"    - {item.get('description')}")
                print(f"    - Severity: {item.get('severity', 'unknown').upper()}")
                print(f"    - Recommendation: {item.get('recommendation')}")

def main():
    parser = argparse.ArgumentParser(description="Test client for vulnerability scanner")
    parser.add_argument("--url", default="http://localhost:4002", help="URL of the vulnerability scanner service")
    parser.add_argument("--file", required=True, help="File to scan (package.json or requirements.txt)")
    args = parser.parse_args()
    
    try:
        with open(args.file, "r") as f:
            content = f.read()
            
        if args.file.endswith("package.json"):
            results = scan_package_json(args.url, content)
        elif args.file.endswith("requirements.txt"):
            results = scan_requirements_txt(args.url, content)
        else:
            print(f"Unsupported file type: {args.file}")
            return
            
        print_vulnerability_report(results)
        
    except FileNotFoundError:
        print(f"File not found: {args.file}")
    except requests.exceptions.RequestException as e:
        print(f"Error connecting to vulnerability scanner: {e}")
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main() 