import json
import subprocess
import os
import tempfile

class VulnerabilityScanner:
    """
    A class that provides methods to scan different types of dependency files
    for security vulnerabilities.
    """
    
    @staticmethod
    def scan_npm_dependencies(package_content):
        """Scan package.json content for vulnerabilities using npm audit"""
        try:
            # Create a temporary directory
            with tempfile.TemporaryDirectory() as temp_dir:
                # Create package.json file
                package_path = os.path.join(temp_dir, "package.json")
                with open(package_path, "w") as f:
                    f.write(package_content)
                    
                # Run npm audit
                output = subprocess.check_output(
                    ["npm", "audit", "--json"], 
                    cwd=temp_dir,
                    stderr=subprocess.STDOUT
                )
                try:
                    results = json.loads(output)
                except json.JSONDecodeError:
                    results = {"error": "Failed to parse npm audit output", "raw_output": output.decode('utf-8')}
                
                return results
        except subprocess.CalledProcessError as e:
            # npm audit returns non-zero exit code when vulnerabilities are found
            try:
                return json.loads(e.output)
            except json.JSONDecodeError:
                return {"error": f"NPM audit failed with exit code {e.returncode}", "output": e.output.decode('utf-8')}
        except Exception as e:
            return {"error": str(e)}
    
    @staticmethod
    def scan_python_dependencies(requirements_content):
        """Scan requirements.txt content for vulnerabilities using safety check"""
        try:
            # Create a temporary directory
            with tempfile.TemporaryDirectory() as temp_dir:
                # Create requirements.txt file
                req_path = os.path.join(temp_dir, "requirements.txt")
                with open(req_path, "w") as f:
                    f.write(requirements_content)
                    
                # Run safety check
                try:
                    output = subprocess.check_output(
                        ["safety", "check", "-r", req_path, "--json"],
                        stderr=subprocess.STDOUT
                    )
                    try:
                        results = json.loads(output)
                    except json.JSONDecodeError:
                        results = {"error": "Failed to parse safety check output", "raw_output": output.decode('utf-8')}
                except subprocess.CalledProcessError as e:
                    # safety returns non-zero exit code when vulnerabilities are found
                    try:
                        results = json.loads(e.output)
                    except json.JSONDecodeError:
                        results = {"error": f"Safety check failed with exit code {e.returncode}", "output": e.output.decode('utf-8')}
                
                return results
        except Exception as e:
            return {"error": str(e)}
    
    @staticmethod
    def calculate_risk_level(results):
        """Calculate risk level based on vulnerability count and severity"""
        if "error" in results:
            return "unknown"
            
        vuln_count = 0
        high_severity_count = 0
        
        # Handle npm audit format
        if "vulnerabilities" in results:
            vuln_dict = results.get("vulnerabilities", {})
            vuln_count = sum(len(v) for v in vuln_dict.values() if isinstance(v, list))
            high_severity_count = len(results.get("vulnerabilities", {}).get("high", [])) + len(results.get("vulnerabilities", {}).get("critical", []))
        
        # Handle safety check format
        elif "vulnerabilities" in results and isinstance(results["vulnerabilities"], list):
            vuln_count = len(results["vulnerabilities"])
            high_severity_count = sum(1 for v in results["vulnerabilities"] if v.get("severity", "").lower() in ["high", "critical"])
        
        if high_severity_count > 0:
            return "high"
        elif vuln_count > 10:
            return "high"
        elif vuln_count > 5:
            return "medium"
        elif vuln_count > 0:
            return "low"
        return "none" 