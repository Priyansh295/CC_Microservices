worker_processes 1;

events {
    worker_connections 1024;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Enhanced error logging
    error_log /var/log/nginx/error.log debug;
    access_log /var/log/nginx/access.log;

    # CORS configuration - Enhanced for different environments
    map $http_origin $cors_origin {
        default "";
        # Development environments
        "~^https?://localhost(:[0-9]+)?$" "$http_origin";
        "~^https?://127.0.0.1(:[0-9]+)?$" "$http_origin";
        # Testing/Staging environments
        "~^https?://.*\.test\.example\.com$" "$http_origin";
        "~^https?://.*\.staging\.example\.com$" "$http_origin";
        # Production environment - add your domains here
        "https://app.example.com" "$http_origin";
        "https://www.example.com" "$http_origin";
        "https://example.com" "$http_origin";
    }

    # Increase timeouts for microservice communication
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    server {
        listen 80;
        server_name localhost;

        # Global CORS headers
        add_header 'Access-Control-Allow-Origin' $cors_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        
        # Handle preflight requests
        location = /options-preflight {
            add_header 'Access-Control-Allow-Origin' $cors_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        # Redirect OPTIONS requests to the preflight handler
        if ($request_method = 'OPTIONS') {
            rewrite ^ /options-preflight last;
        }

        # Access Control Service
        location /api/access-control/ {
            proxy_pass http://access-control:3001/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass_request_headers on;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Vulnerability Scanner Service
        location /api/vulnerability-scanner/ {
            proxy_pass http://vulnerability-scanner:3002/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass_request_headers on;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Bug Monitoring Service
        location /api/bug-monitoring/ {
            proxy_pass http://bug-monitoring:3003/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass_request_headers on;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Data Encryption Service
        location /api/data-encryption/ {
            proxy_pass http://data-encryption:3004/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass_request_headers on;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Authentication Service API
        location /api/auth/ {
            proxy_pass http://authentication:3001/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass_request_headers on;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # RBAC Service API
        location /api/rbac/ {
            proxy_pass http://rbac-service:3001/api/v1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass_request_headers on;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Authentication Frontend
        location /auth/ {
            proxy_pass http://auth-frontend:80/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass_request_headers on;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Default route - serve static welcome page or redirect to frontend
        location / {
            # Try to serve static files first, then redirect to auth frontend
            try_files $uri $uri/ @frontend_redirect;
        }

        # Fallback for misrouted requests
        location @frontend_redirect {
            return 302 /auth/;
        }

        # Debug endpoint for showing request information
        location /debug {
            add_header Content-Type application/json;
            return 200 '{"path":"$uri","host":"$host","remote_addr":"$remote_addr","request_method":"$request_method","http_user_agent":"$http_user_agent"}';
        }

        # NGINX health check
        location /health {
            access_log off;
            return 200 '{"status":"healthy"}';
            add_header Content-Type application/json;
        }

        # Service health checks - keep these separate from the main service endpoints
        location = /api/access-control/health {
            proxy_pass http://access-control:3001/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        location = /api/vulnerability-scanner/health {
            proxy_pass http://vulnerability-scanner:3002/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        location = /api/bug-monitoring/health {
            proxy_pass http://bug-monitoring:3003/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        location = /api/data-encryption/health {
            proxy_pass http://data-encryption:3004/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        location = /api/auth/health {
            proxy_pass http://authentication:3001/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        
        location = /api/rbac/health {
            proxy_pass http://rbac-service:3001/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
    }
}
